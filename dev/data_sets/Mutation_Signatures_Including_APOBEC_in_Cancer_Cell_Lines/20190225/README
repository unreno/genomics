

/raid/data/working/CCLS/20180705-vcf-analysis
/raid/data/working/CCLS/20180522-vcf-snp-analysis/
/raid/data/working/TCGA_Glioma_HERV52/20180416.apobec/


Publication
https://doi.org/10.1093/jncics/pky002
https://academic.oup.com/jncics/article/2/1/pky002/4942295

Github repo
https://github.com/mcjarvis/Mutation-Signatures-Including-APOBEC-in-Cancer-Cell-Lines-JNCI-CS-Supplementary-Scripts


Gonna try to reproduce publication's analysis.

BC-3, BT-474, and NALM-6

#
#	Step 1: Download, organize, and filter raw mutation data: The fields cell line name (column 5), mutation (column 18), mutation type (column 20), version of the reference genome (column 23), chromosome position of the mutation (column 24), and DNA strand (column 25) were extracted from the “CosmicCLP_MutantExport.tsv” file using the following command:
#	
#	awk ′BEGIN{FS="\t"; OFS="\t"}; 0 !∼ /^#/ {print $5, $18, $20, $23, $24, $25}′CosmicCLP_MutantExport.tsv > cosmic_mut.txt
#	

There are no comments so the condition is incorrect ($0 and not 0) and is unnecessary.

“CosmicCLP_MutantExport.tsv,” version 81, was downloaded on July 17, 2017, from the COSMIC cell line project (CLP) online database

Register and download "COSMIC Mutation Data" (CosmicCLP_MutantExport.tsv.gz) from https://cancer.sanger.ac.uk/cosmic/download
The paper used v81. v87 was available for me.


gunzip CosmicCLP_MutantExport.tsv.gz

head -1 CosmicCLP_MutantExport.tsv

Gene name	Accession Number	Gene CDS length	HGNC ID	Sample name	ID_sample	ID_tumour	Primary site	Site subtype 1	Site subtype 2	Site subtype 3	Primary histology	Histology subtype 1	Histology subtype 2	Histology subtype 3	Genome-wide screen	Mutation ID	Mutation CDS	Mutation AA	Mutation Description	Mutation zygosity	LOH	GRCh	Mutation genome position	Mutation strand	SNP	Resistance Mutation	FATHMM prediction	FATHMM score	Mutation somatic status	Pubmed_PMID	ID_STUDY	Sample Type	Tumour origin	Age


head -5 CosmicCLP_MutantExport.tsv | awk 'BEGIN{FS="\t"; OFS="\t"};{print $5, $18, $20, $23, $24, $25}'

Sample name	Mutation CDS	Mutation Description	GRCh	Mutation genome position	strand
PL-21	c.437C>T	Substitution - Missense	38	12:25225627-25225627	-
A375	c.410G>A	Substitution - Missense	38	11:73234569-73234569	+
MCC26	c.2150C>T	Substitution - Missense	38	20:51790333-51790333	-
OV-7	c.761T>G	Substitution - Missense	38	17:7674202-7674202	-


Are these the correct columns? In 2 years, some things change. Gonna have to assume they are

Sample name                cell line name (column 5)
Mutation CDS               mutation (column 18)
Mutation Description       mutation type (column 20)
GRCh                       version of the reference genome (column 23)
Mutation genome position   chromosome position of the mutation (column 24)
strand                     DNA strand (column 25)



awk 'BEGIN{FS="\t"; OFS="\t"; c["BC-3"]=c["BT-474"]=c["NALM-6"]=1};( $5 in c ){print $5, $18, $20, $23, $24, $25 > $5"-Step1.tsv" }' CosmicCLP_MutantExport.tsv


#
#	Step 2: Removal of all non-single-base substitution mutations: All mutations that are not single-base substitutions (eg, insertions, deletions, and complex multibase substitutions) were filtered out of the table, leaving single-base substitution mutations annotated as nonsense, missense, or coding silent substitutions. This essential filtering step reduced the number of mutations in BT-474, BC-3, and NALM-6 from 1595 to 1407, 1537 to 1371, and 3291 to 2962, respectively.
#

Not all substitutions are 1 single-base, and not all single-base mutations are substitutions.

awk 'BEGIN{FS="\t"; OFS="\t"; c["BC-3"]=c["BT-474"]=c["NALM-6"]=1};( $5 in c ){ split($24,a,":");split(a[2],b,"-"); if($20 ~ "Substitution" && b[1] == b[2] ) print $5, $18, $20, $23, $24, $25 > $5"-Step2.tsv" }' CosmicCLP_MutantExport.tsv

wc -l BC* BT* NALM-6*
  1538 BC-3-Step1.tsv
  1371 BC-3-Step2.tsv
  1595 BT-474-Step1.tsv
  1407 BT-474-Step2.tsv
  3291 NALM-6-Step1.tsv
  2962 NALM-6-Step2.tsv
 12164 total

Count match.




#
#	Step 3: Additional filtering to remove nonunique chromosomal positions and file reformatting: All nonunique chromosome positions were filtered out of each cell line individually, which ensures that each mutation has only one associated chromosomal position within a cell line. A tab-separated file was created with chromosome number (eg, “chr1”), chromosomal position, reference allele, alternate (mutant) allele, strand of the substitution, and sample (cell line name) as columns. This table was reordered as follows for subsequent analyses: chr1-chr9, chrX, chrY, chr10-chr22, then by ascending chromosomal position, and it was then saved as a text file. This step reduced mutation numbers in BT-474, BC-3, and NALM-6 from 1407 to 1021, 1371 to 963, and 2962 to 2110, respectively.
#

Reference and Alternate are not in this file. Need to extract so will take time. Could parse from 
parse($24)	parse($24)	parse($18) parse($18) $25	$5

$ echo "c.2150C>T" | awk '{print substr($0,length($0),1)}'
T
$ echo "c.2150C>T" | awk '{print substr($0,length($0)-2,1)}'
C


I guess here were assuming that the mutation is the same?

awk 'BEGIN{FS="\t"; OFS="\t"; c["BC-3"]=c["BT-474"]=c["NALM-6"]=1};( $5 in c ){ split($24,a,":");split(a[2],b,"-"); if($20 ~ "Substitution" && b[1] == b[2] && !seen[$24] ) { print a[1], b[1], substr($18,length($18)-2,1), substr($18,length($18),1), $25, $5 > $5"-Step3a.tsv"; seen[$24]++ } }' CosmicCLP_MutantExport.tsv

for f in *-Step3a.tsv ; do n=${f/Step3a/Step3b}; sort -n $f > $n ;  done


These use chromosome "23" and "24". I'll have to figure out what these are. X and Y I'm guessing.


wc -l BC* BT* NALM-6*
   1538 BC-3-Step1.tsv
   1371 BC-3-Step2.tsv
    961 BC-3-Step3a.tsv
    961 BC-3-Step3b.tsv
   1595 BT-474-Step1.tsv
   1407 BT-474-Step2.tsv
   1020 BT-474-Step3a.tsv
   1020 BT-474-Step3b.tsv
   3291 NALM-6-Step1.tsv
   2962 NALM-6-Step2.tsv
   2109 NALM-6-Step3a.tsv
   2109 NALM-6-Step3b.tsv



Sadly, the counts are off by 1 or 2. 1 may be the header, the additional one may be due to newer file.




#
#	Step 4: Filter out “nonmutations” and “nonmatching mutations”: The hg38 reference genome (FastA file, GCA_000001405.2) was used to filter out nonmutations and nonmatching mutations (downloaded from http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/ on July 16, 2017). Nonmutations are instances in which the alternate (mutant) allele matches the reference genome at that position. Nonmatching mutations are instances in which the reference allele does not match the reference genome at that position. These anomalies were filtered out of the single-base substitution mutation data set. This step caused a modest reduction in mutation numbers in a small number of cell lines. For instance, the numbers above for BT-474 and BC-3 were unchanged, but the number for NALM-6 reduced from 2110 to 2108. These single-base substation numbers were used to plot medians in Figure 1, and raw values are listed for each trinucleotide context in Supplementary Table 1 (available online). Following the filtering steps described above, the total single-base substitution mutation count across all cell lines was 663 075.
#


I don't get how you could have a reference allele not matching the reference genome.


Ok. Awk script is way too complicated for a one liner. Now in process.bash


The addition of "samtools faidx" makes this script take quite a while.












awk 'BEGIN{FS="\t"; OFS="\t"};{ split($24,a,":");split(a[2],b,"-"); if($20 ~ "Substitution" && b[1] == b[2] && !seen[$24] ) { print a[1], b[1], substr($18,length($18)-2,1), substr($18,length($18),1), $25, $5 ; seen[$24]++ } }' CosmicCLP_MutantExport.tsv > CosmicCLP_MutantExport-Step3.tsv

609662 CosmicCLP_MutantExport-Step3.tsv

That's much less than expected. TRY AGAIN WITHOUT THE SEEN CHECK. GET TOTAL COUNT FOR EACH STEP.

awk 'BEGIN{FS="\t"; OFS="\t"};{ split($24,a,":");split(a[2],b,"-"); if($20 ~ "Substitution" && b[1] == b[2] ) { print a[1], b[1], substr($18,length($18)-2,1), substr($18,length($18),1), $25, $5 } }' CosmicCLP_MutantExport.tsv > CosmicCLP_MutantExport-Step3noseen.tsv



MOVE ALL STEP SCRIPTS INTO process.bash FOR TOTAL REPRODUCABILITY




















--------------------------------------------------

Now things get wrong.



The github analysis seems quite bogus as well.

From https://github.com/mcjarvis/Mutation-Signatures-Including-APOBEC-in-Cancer-Cell-Lines-JNCI-CS-Supplementary-Scripts/blob/master/README_mutation_processing_commands


Confused, as the above parsing DOES NOT PRODUCE THESE 5 FIELDS
Which also explains the upcoming confusion as well.
# From the 5-field mutation file (chr, pos, ref, alt, sample):


# 1. Split file into each separate cell line, keeping the header
awk  'NR==1 {h=$0; next} !seen[$5]++{ f="FILE_"FILENAME"_"$5".txt";print h > f } { print >> f; close(f)}' cosmic_mut.txt

I don't think this is correct.
The field separator isn't defined and the data has spaces so won't parse correctly.
Also, and perhaps more important, $5 IS NOT THE CELL LINE NAME.
And lastly, the coding is wrong. f will be incorrectly set to the last cell line.
More, some $1 contain slashes which can't be in files.

awk -F"\t" 'NR==1 {h=$0; next}{f="FILE_"FILENAME"_"$1".txt";gsub("/","_",f)} !seen[$1]++{print h > f }{print >> f; close(f)}' cosmic_mut.txt

That worked, but still don't know if correct.




#
# 2. Run "count_trinuc_muts_v7.pl" script on every file
for i in *.txt; do perl ../count_trinuc_muts_v7.pl pvcf ../hg38.fa $i; done

I don't have access to v7 of this script, but v8 won't work.
The expected format and the format of these files are way different.

for i in *.txt; do echo $i; perl ../count_trinuc_muts_v8.pl pvcf /raid/refs/fasta/hg38.fa $i; done





# 3. Concatenate files together, and check that the file has the same number of mutations as the initial mutation file
head -1 *BA*count.txt > all.txt; tail -n +2 -q *count.txt >> all.txt

That doesn't make any sense.

















R
source("https://bioconductor.org/biocLite.R")
biocLite('deconstructSigs')
biocLite("BSgenome.Hsapiens.UCSC.hg38")
install.packages('ggplot2')



R ( basically analysis_and_visualization_commands.R )
require(deconstructSigs)
require(ggplot2)
require(BSgenome.Hsapiens.UCSC.hg38)
hg38 <- BSgenome.Hsapiens.UCSC.hg38

cosmic_mut = read.table("cosmic_mut.txt",header = FALSE, col.names = c("chr","pos","ref","alt","sample"))


cosmic_mut_all_sort <- read.table(file = "cosmic_mut_all_sort.txt", header = FALSE, sep = "\t", stringsAsFactors = T )


colnames(cosmic_mut_all_sort) <- c("chr", "pos", "5_tetnuc", "3_tetnuc", "trinuc", "mut", "trinuc_mut", "strand", "context", "C_count", "TC_count", "TCA_count", "TCT_count", "YTCA_count", "RTCA_count", "sample")


cosmic_mut_sort <- with(cosmic_mut, cosmic_mut[order(cosmic_mut[,"sample"]),])
rownames(cosmic_mut_sort) <- NULL
cosmic_mut_sort$sample <- as.factor(cosmic_mut_sort$sample)

deconstructSigs_input <- cosmic_mut_all_sort[,c(1:2,6,16)]
deconstructSigs_input$ref <- substr(deconstructSigs_input$mut, 1, 1) 
deconstructSigs_input$alt <- substr(deconstructSigs_input$mut, 3, 3) 
deconstructSigs_input <- subset(deconstructSigs_input, select = c("chr", "pos", "ref", "alt", "sample"))


mut.counts <- mut.to.sigs.input(mut.ref = deconstructSigs_input, sample.id = "sample", chr = "chr", pos = "pos", ref = "ref", alt = "alt", bsg = hg38)

signatures.nature2013 <- load("signatures.nature2013.rda") 


context <- getTriContextFraction(mut.counts.ref = mut.counts, trimer.counts.method = "default")
context$tca_tct <- context[,"T[C>T]A"] + context[,"T[C>T]T"] + context[,"T[C>G]A"] + context[,"T[C>G]T"]
context$sample <- rownames(context)
tca_tct <- subset(context, select = c("sample", "tca_tct"))
rownames(tca_tct) <- NULL
context$sample <- NULL
context$tca_tct <- NULL



output.sigs.final <- as.data.frame(whichSignatures(context,
    sample.id = 'x186069',
    signatures.cosmic,
    contexts.needed = F))

for(i in (2:nrow(context))) {
  output.sigs <- as.data.frame(whichSignatures(context,
      sample.id = rownames(context[i,]),
      signatures.cosmic,
      contexts.needed = F))
  output.sigs.final <- rbind(output.sigs.final, output.sigs)
}


output.sigs.final <- output.sigs.final[-c(1021),]
output.sigs.final$zAPOBEC.Sig <- output.sigs.final$weights.Signature.2 + output.sigs.final$weights.Signature.13

output.sigs.final <- output.sigs.final[,c(1:30,319,320)]
output.sigs.final$sample <- rownames(output.sigs.final)
rownames(output.sigs.final) <- NULL


# Not sure if this is useful 
write.table(mut.counts,file='mut.counts.tsv')






