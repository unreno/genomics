


./process.bash




tail -q -n 1 *hg38.loc.bam.bowtie2.err | awk -F% '{s+=$1}END{print s/NR}'
tail -q -n 1 *mature.loc.bam.bowtie2.err | awk -F% '{s+=$1}END{print s/NR}'
tail -q -n 1 *hairpin.loc.bam.bowtie2.err | awk -F% '{s+=$1}END{print s/NR}'
tail -q -n 1 *viral.masked.loc.bam.bowtie2.err | awk -F% '{s+=$1}END{print s/NR}'
tail -q -n 1 *hg38.e2e.bam.bowtie2.err | awk -F% '{s+=$1}END{print s/NR}'
tail -q -n 1 *mature.e2e.bam.bowtie2.err | awk -F% '{s+=$1}END{print s/NR}'
tail -q -n 1 *hairpin.e2e.bam.bowtie2.err | awk -F% '{s+=$1}END{print s/NR}'
tail -q -n 1 *viral.masked.e2e.bam.bowtie2.err | awk -F% '{s+=$1}END{print s/NR}'





Some Bowtie 2 options specify a function rather than an individual number or setting. In these cases the user specifies three parameters: (a) a function type F, (b) a constant term B, and (c) a coefficient A. The available function types are constant (C), linear (L), square-root (S), and natural log (G). The parameters are specified as F,B,A - that is, the function type, the constant term, and the coefficient are separated by commas with no whitespace. The constant term and coefficient may be negative and/or floating-point numbers.

For example, if the function specification is L,-0.4,-0.6, then the function defined is:

f(x) = -0.4 + -0.6 * x
If the function specification is G,1,5.4, then the function defined is:

f(x) = 1.0 + 5.4 * ln(x)
See the documentation for the option in question to learn what the parameter x is for. For example, in the case if the --score-min option, the function f(x) sets the minimum alignment score necessary for an alignment to be considered valid, and x is the read length.



Mature scoring is probably too low to adjust?

  --score-min <func> min acceptable alignment score w/r/t read length
                     (G,20,8 for local, L,-0.6,-0.6 for end-to-end)

--score-min G,20,8
--score-min G,10,8
--score-min G,1,6




Matrix
               subject1 ... subject77
total fa reads
hsa-1-*
hsa-2-*
hsa-...-*


Awk Sum Squares Standard Deviation (stddev)

zcat /raid/data/raw/Stanford_Project71/test2/R1.bbduk.fastq.gz /raid/data/raw/Stanford_Project71/test2/R2.bbduk.fastq.gz | paste - - - - | cut -f 2 | awk '{ l=length; sum+=l; sumsq+=(l)^2; print "Avg:",sum/NR,"\tStddev:\t"sqrt((sumsq-sum^2/NR)/NR)}'

Avg: 146.042 	Stddev:	17.6123


REF /home/jake/.github/unreno/genomics/dev/data_sets/CCLS/20181116-kallisto-sleuth

Made mature, hairpin and mirna indexes with kmer size of 21. Default of 31 found virtually no mature sequences.
Produced a lot of "-nan" entries
The shortest mature reference is 16bp so should use a kmer size less than that.

kallisto index --kmer-size=15 --index mirna.idx ../fasta/human_mirna.ACTG.fa 
kallisto index --kmer-size=15 --index hairpin.idx ../fasta/human_hairpin.ACTG.fa 
kallisto index --kmer-size=15 --index mature.idx ../fasta/human_mature.ACTG.fa 




./process.bash
./merge.py


Awaiting Meta Data

./deseq2.py

./sleuth.Rscript


